import os
import random
import threading
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes
)
from openpyxl import load_workbook

# üé≠ –§–µ–π–∫–æ–≤—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
flask_app = Flask(__name__)

@flask_app.route('/')
def home():
    return 'Bot is alive on Render!'

def run_flask():
    flask_app.run(host='0.0.0.0', port=10000)

# üìò –¢–µ–∫—Å—Ç –ø–æ–º–æ—â–∏
HELP_TEXT = (
    "üïµÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –ø–æ –Ω–∞—à–µ–π –ª—é–±–∏–º–æ–π –∏–≥—Ä–µ ‚Äî *–ú–∞—Ñ–∏—è*.\n\n"
    "üìö –ö–æ–º–∞–Ω–¥—ã:\n"
    "/start ‚Äî –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º –∏ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
    "/score ‚Äî –≤–∞—à —Ç–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n"
    "/leaders ‚Äî —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ (–ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏)\n"
    "/stop ‚Äî –ø—Ä–µ—Ä–≤–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É\n"
    "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n\n"
    "–û—Ç–≤–µ—Ç—ã –≤—ã–±–∏—Ä–∞—é—Ç—Å—è –∫–Ω–æ–ø–∫–∞–º–∏. –î—É–º–∞–π—Ç–µ –±—ã—Å—Ç—Ä–æ ‚Äî –º–∞—Ñ–∏—è –Ω–µ –¥—Ä–µ–º–ª–µ—Ç...\n\n"
    "üìå *–í–µ–¥—É—â–∏–π –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏ –±—ã—Ç—å –±–µ—Å–ø—Ä–∏—Å—Ç—Ä–∞—Å—Ç–Ω—ã–º.*"
)

# üì• –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
def load_all_questions():
    wb = load_workbook("questions.xlsx")
    sheet = wb.active
    headers = [cell.value for cell in sheet[1]]
    return [dict(zip(headers, row)) for row in sheet.iter_rows(min_row=2, values_only=True)]

ALL_QUESTIONS = load_all_questions()

# üß† –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_progress = {}
user_scores = {}
user_question_sets = {}

# üöÄ –ö–æ–º–∞–Ω–¥—ã Telegram
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_progress[user_id] = 0
    user_scores[user_id] = 0

    buttons = [
        [InlineKeyboardButton("5 ‚Äî –†–∞–∑–º–∏–Ω–∫–∞ üîÑ", callback_data="quiz_5")],
        [InlineKeyboardButton("10 ‚Äî –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—á–Ω–æ—Å—Ç—å üß†", callback_data="quiz_10")],
        [InlineKeyboardButton("20 ‚Äî –Ø –ü–†–û —ç—Ç–æ–π –∏–≥—Ä—ã üé©", callback_data="quiz_20")]
    ]
    markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_text(
        "üîç –°–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤—ã–¥–µ—Ä–∂–∏—à—å?\n"
        "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∏ –¥–æ–∫–∞–∂–∏, —á—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –º–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å –ø–æ–¥ –ø—Ä–∏–∫—Ä—ã—Ç–∏–µ–º:",
        reply_markup=markup
    )

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(HELP_TEXT, parse_mode="Markdown")

async def stop_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    user_progress.pop(uid, None)
    user_scores.pop(uid, None)
    user_question_sets.pop(uid, None)
    await update.message.reply_text("‚õî –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.\n\n" + HELP_TEXT, parse_mode="Markdown")

async def show_score(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    correct = user_scores.get(uid, 0)
    total = user_progress.get(uid, 0)
    await update.message.reply_text(f"üìä –í–∞—à —Å—á—ë—Ç: {correct} –∏–∑ {total} –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")

async def show_leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    stats = []
    for uid in user_scores:
        correct = user_scores[uid]
        total = user_progress.get(uid, 0)
        if total >= 5:
            percent = round(correct / total * 100)
            stats.append((uid, correct, total, percent))

    if not stats:
        await update.message.reply_text("üë• –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ—è–≤–∏—Ç—Å—è, –∫–æ–≥–¥–∞ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–≥—Ä–æ–∫ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ 5+ –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return

    stats.sort(key=lambda x: x[3], reverse=True)
    lines = []
    for rank, (uid, correct, total, percent) in enumerate(stats[:10], 1):
        try:
            user = await context.bot.get_chat(uid)
            name = user.username or user.first_name or f"User{uid}"
        except:
            name = f"User{uid}"
        lines.append(f"{rank}. @{name}: {correct} –∏–∑ {total} ‚Äî {percent}%")

    await update.message.reply_text("üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏ (–æ—Ç 5 –æ—Ç–≤–µ—Ç–æ–≤):\n\n" + "\n".join(lines))

# üß© –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∂–∏–º–∞
async def handle_start_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = query.from_user.id

    count = int(query.data.replace("quiz_", ""))
    selected = random.sample(ALL_QUESTIONS, k=min(count, len(ALL_QUESTIONS)))
    user_question_sets[uid] = selected
    user_progress[uid] = 0
    user_scores[uid] = 0

    await query.edit_message_text(f"üî• –û—Ç–ª–∏—á–Ω–æ! –ó–∞–≥—Ä—É–∂–∞—é {count} –≤–æ–ø—Ä–æ—Å–æ–≤.")
    await send_question(query, context, uid)

# ‚ùì –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
async def send_question(source, context, uid):
    chat_id = getattr(source.message, "chat_id", uid)
    idx = user_progress.get(uid, 0)
    questions = user_question_sets.get(uid, [])

    if idx >= len(questions):
        score = user_scores.get(uid, 0)
        total = len(questions)
        await context.bot.send_message(
            chat_id=chat_id,
            text=(
                f"üéâ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–í—ã –Ω–∞–±—Ä–∞–ª–∏ {score} –∏–∑ {total}.\n\n"
                "üëâ /start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
                "üëâ /score ‚Äî –≤–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n"
                "üëâ /leaders ‚Äî —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤\n"
                "üëâ /help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
            )
        )
        return

    q = questions[idx]
    buttons = [
        [InlineKeyboardButton(q["Option1"], callback_data=q["Option1"])],
        [InlineKeyboardButton(q["Option2"], callback_data=q["Option2"])],
        [InlineKeyboardButton(q["Option3"], callback_data=q["Option3"])],
        [InlineKeyboardButton(q["Option4"], callback_data=q["Option4"])]
    ]
    markup = InlineKeyboardMarkup(buttons)
    await context.bot.send_message(chat_id=chat_id, text=q["Question"], reply_markup=markup)

# üéØ –û—Ç–≤–µ—Ç
async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = query.from_user.id
    idx = user_progress.get(uid, 0)
    questions = user_question_sets.get(uid, [])

    if idx >= len(questions):
        await query.edit_message_text("‚ùóÔ∏è–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return

    q = questions[idx]
    selected = query.data
    correct = str(q["CorrectAnswer"]).strip()
    explanation = str(q.get("Explanation", "")).strip()

    if selected == correct:
        result = "‚úÖ –í–µ—Ä–Ω–æ!"
        user_scores[uid] += 1
    else:
        result = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}"

    if explanation:
        result += f"\n\nüìò –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {explanation}"

    await query.edit_message_text(result)
    user_progress[uid] += 1
    await send_question(query, context, uid)

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
app = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", show_help))
app.add_handler(CommandHandler("score", show_score))
app.add_handler(CommandHandler("leaders", show_leaderboard))
app.add_handler(CommandHandler("stop", stop_quiz))
app.add_handler(CallbackQueryHandler(handle_start_mode, pattern="^quiz_"))
app.add_handler(CallbackQueryHandler(handle_answer))

if __name__ == '__main__':
    threading.Thread(target=run_flask).start()
    app.run_polling()
